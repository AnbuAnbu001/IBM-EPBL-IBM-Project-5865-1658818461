
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams
2. Load the Dataset

df=pd.read_csv(r'/content/Churn_Modelling.csv')
df.head()
RowNumber	CustomerId	Surname	CreditScore	Geography	Gender	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
0	1	15634602	Hargrave	619	France	Female	42	2	0.00	1	1	1	101348.88	1
1	2	15647311	Hill	608	Spain	Female	41	1	83807.86	1	0	1	112542.58	0
2	3	15619304	Onio	502	France	Female	42	8	159660.80	3	1	0	113931.57	1
3	4	15701354	Boni	699	France	Female	39	1	0.00	2	0	0	93826.63	0
4	5	15737888	Mitchell	850	Spain	Female	43	2	125510.82	1	1	1	79084.10	0
3.1 Univariate

sns.displot(df.Exited)
<seaborn.axisgrid.FacetGrid at 0x7f4ae393d410>

3.2 Bivariate

sns.lineplot(df.Age,df.Gender)
/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
  FutureWarning
<matplotlib.axes._subplots.AxesSubplot at 0x7f4ae1a144d0>

3.3 Multivariate

sns.pairplot(df)
<seaborn.axisgrid.PairGrid at 0x7f4adec882d0>

4.Perform descriptive statistics

df.describe()
RowNumber	CustomerId	CreditScore	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
count	10000.00000	1.000000e+04	10000.000000	10000.000000	10000.000000	10000.000000	10000.000000	10000.00000	10000.000000	10000.000000	10000.000000
mean	5000.50000	1.569094e+07	650.528800	38.921800	5.012800	76485.889288	1.530200	0.70550	0.515100	100090.239881	0.203700
std	2886.89568	7.193619e+04	96.653299	10.487806	2.892174	62397.405202	0.581654	0.45584	0.499797	57510.492818	0.402769
min	1.00000	1.556570e+07	350.000000	18.000000	0.000000	0.000000	1.000000	0.00000	0.000000	11.580000	0.000000
25%	2500.75000	1.562853e+07	584.000000	32.000000	3.000000	0.000000	1.000000	0.00000	0.000000	51002.110000	0.000000
50%	5000.50000	1.569074e+07	652.000000	37.000000	5.000000	97198.540000	1.000000	1.00000	1.000000	100193.915000	0.000000
75%	7500.25000	1.575323e+07	718.000000	44.000000	7.000000	127644.240000	2.000000	1.00000	1.000000	149388.247500	0.000000
max	10000.00000	1.581569e+07	850.000000	92.000000	10.000000	250898.090000	4.000000	1.00000	1.000000	199992.480000	1.000000
5.Handle the missing values

df.isnull().any
<bound method NDFrame._add_numeric_operations.<locals>.any of       RowNumber  CustomerId  Surname  CreditScore  Geography  Gender    Age  \
0         False       False    False        False      False   False  False   
1         False       False    False        False      False   False  False   
2         False       False    False        False      False   False  False   
3         False       False    False        False      False   False  False   
4         False       False    False        False      False   False  False   
...         ...         ...      ...          ...        ...     ...    ...   
9995      False       False    False        False      False   False  False   
9996      False       False    False        False      False   False  False   
9997      False       False    False        False      False   False  False   
9998      False       False    False        False      False   False  False   
9999      False       False    False        False      False   False  False   

      Tenure  Balance  NumOfProducts  HasCrCard  IsActiveMember  \
0      False    False          False      False           False   
1      False    False          False      False           False   
2      False    False          False      False           False   
3      False    False          False      False           False   
4      False    False          False      False           False   
...      ...      ...            ...        ...             ...   
9995   False    False          False      False           False   
9996   False    False          False      False           False   
9997   False    False          False      False           False   
9998   False    False          False      False           False   
9999   False    False          False      False           False   

      EstimatedSalary  Exited  
0               False   False  
1               False   False  
2               False   False  
3               False   False  
4               False   False  
...               ...     ...  
9995            False   False  
9996            False   False  
9997            False   False  
9998            False   False  
9999            False   False  

[10000 rows x 14 columns]>
6.Find the outliers and replace the outliers

Find the outliers

sns.boxplot(df.Age)
/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
  FutureWarning
<matplotlib.axes._subplots.AxesSubplot at 0x7f76c130ead0>

Replace the outliers

q1=df.Age.quantile(0.25)
q3=df.Age.quantile(0.75)
IQR=q3-q1
upper_limit=q3 + 1.5*IQR
lower_limit=q3 - 1.5*IQR
df['Age']=np.where(df['Age']>upper_limit,upper_limit,np.where(df['Age']<lower_limit,lower_limit,df['Age']))
sns.boxplot(df.Age)
/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.
  FutureWarning
<matplotlib.axes._subplots.AxesSubplot at 0x7f76c0dc7910>

7.Check the categorical columns and perform encoding

Check the categorical columns

df._get_numeric_data()
RowNumber	CustomerId	CreditScore	Geography	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
0	1	15634602	619	0	42.0	2	0.00	1	1	1	101348.88	1
1	2	15647311	608	2	41.0	1	83807.86	1	0	1	112542.58	0
2	3	15619304	502	0	42.0	8	159660.80	3	1	0	113931.57	1
3	4	15701354	699	0	39.0	1	0.00	2	0	0	93826.63	0
4	5	15737888	850	2	43.0	2	125510.82	1	1	1	79084.10	0
...	...	...	...	...	...	...	...	...	...	...	...	...
9995	9996	15606229	771	0	39.0	5	0.00	2	1	0	96270.64	0
9996	9997	15569892	516	0	35.0	10	57369.61	1	1	1	101699.77	0
9997	9998	15584532	709	0	36.0	7	0.00	1	0	1	42085.58	1
9998	9999	15682355	772	1	42.0	3	75075.31	2	1	0	92888.52	1
9999	10000	15628319	792	0	28.0	4	130142.79	1	1	0	38190.78	0
9200 rows × 12 columns

Encoding techniques

One hot Encoding techniques

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df.main=pd.get_dummies(df,columns=['Tenure'])
df.main.head()
RowNumber	CustomerId	Surname	CreditScore	Geography	Gender	Age	Balance	NumOfProducts	HasCrCard	...	Tenure_1	Tenure_2	Tenure_3	Tenure_4	Tenure_5	Tenure_6	Tenure_7	Tenure_8	Tenure_9	Tenure_10
0	1	15634602	Hargrave	619	0	Female	42.0	0.00	1	1	...	0	1	0	0	0	0	0	0	0	0
1	2	15647311	Hill	608	2	Female	41.0	83807.86	1	0	...	1	0	0	0	0	0	0	0	0	0
2	3	15619304	Onio	502	0	Female	42.0	159660.80	3	1	...	0	0	0	0	0	0	0	1	0	0
3	4	15701354	Boni	699	0	Female	39.0	0.00	2	0	...	1	0	0	0	0	0	0	0	0	0
4	5	15737888	Mitchell	850	2	Female	43.0	125510.82	1	1	...	0	1	0	0	0	0	0	0	0	0
5 rows × 24 columns

8.Splitting the data into dependent and independent variables

Dependent variable

Dependent= df.iloc[:, -1].values
 Dependent
array([1, 0, 1, ..., 1, 1, 0])
independent variable

y=df.iloc[:, -1].values print(y)

9.Scale the independent variable

from sklearn.preprocessing import StandardScaler
import pandas as pd

df = pd.DataFrame(data=[[19, 19000], [35, 20000], [26, 50000], [27, 90000]], 
                  columns=['x1', 'x2'])

sc = StandardScaler()
sc.fit(df)

print(sc.mean_)
[2.675e+01 4.475e+04]
10.Split the data into training and testing

from sklearn.model_selection import train_test_split
independent_train,independent_test,Dependent_train,Dependent_test=train_test_split(independent,Dependent)
independent_train
array([[2143, 15782591, 'Cook', ..., 1, 0, 176962.31],
       [4479, 15622443, 'Marshall', ..., 0, 1, 25684.85],
       [1962, 15668472, 'Ritchie', ..., 0, 0, 79886.06],
       ...,
       [3622, 15637993, 'Pokrovsky', ..., 1, 1, 46884.1],
       [1930, 15623791, 'Padovesi', ..., 1, 0, 141896.74],
       [1177, 15604217, 'Williams', ..., 0, 0, 14121.61]], dtype=object)
independent_test
array([[7275, 15680901, 'Potter', ..., 1, 1, 104331.76],
       [6950, 15704681, 'Yeh', ..., 0, 1, 147700.78],
       [9376, 15641389, 'Shen', ..., 1, 0, 82469.06],
       ...,
       [7787, 15566380, 'Drury', ..., 1, 1, 140759.03],
       [3123, 15575002, 'Ferguson', ..., 1, 0, 36221.18],
       [8294, 15770711, 'Lu', ..., 0, 1, 21597.2]], dtype=object)
Dependent_test
array([0, 0, 1, ..., 0, 0, 0])
Dependent_train
array([0, 0, 0, ..., 0, 0, 0])
